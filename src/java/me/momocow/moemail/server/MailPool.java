package me.momocow.moemail.server;

import java.io.File;
import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

import org.apache.logging.log4j.Logger;

import com.google.gson.Gson;

import me.momocow.mobasic.util.StorageFile;
import me.momocow.moemail.MoEMail;
import me.momocow.moemail.init.ModConfigs;
import net.minecraft.util.math.MathHelper;
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
import net.minecraftforge.fml.relauncher.Side;

public class MailPool 
{
	private static MailPool instance;
	private static Logger logger = MoEMail.logger;
	
	private final File mailpoolStorage;
	private final StorageFile<HashMap<UUID, Mail>> poolLog;
	private final StorageFile<HashMap<UUID, Set<UUID>>> recvLog;
	private final StorageFile<HashMap<UUID, Set<UUID>>> unreadLog;
	
	/**
	 * Map[mailID]=Mail
	 */
	private HashMap<UUID, Mail> pool = new HashMap<UUID, Mail>();
	/**
	 * Map[recvrID]=Set[unreadMailID]
	 */
	private HashMap<UUID, Set<UUID>> unread = new HashMap<UUID, Set<UUID>>();
	/**
	 * Map[recvrID]=Set[mailID]
	 */
	private HashMap<UUID, Set<UUID>> recv = new HashMap<UUID, Set<UUID>>();
	
	private MailPool(File logDir) throws Exception
	{
		this.mailpoolStorage = new File(logDir, "mailpool");
		
		try
		{
			this.poolLog = new StorageFile<HashMap<UUID, Mail>> (new File(this.mailpoolStorage, "pool.log"), logger);
			this.recvLog = new StorageFile<HashMap<UUID, Set<UUID>>> (new File(this.mailpoolStorage, "recv.log"), logger);
			this.unreadLog = new StorageFile<HashMap<UUID, Set<UUID>>> (new File(this.mailpoolStorage, "unread.log"), logger);
		}
		catch(Exception e)
		{
			logger.warn("Fail to initialize the local storage files.", e);
			throw e;
		}
	}
	
	public void load() throws Exception
	{
		this.pool = this.poolLog.load();
		this.recv = this.recvLog.load();
		this.unread = this.unreadLog.load();
	}
	
	public void save() throws Exception
	{		
		this.poolLog.save(this.pool);
		this.recvLog.save(this.recv);
		this.unreadLog.save(this.unread);
	}
	
	/**
	 * Store the mail to the mail pool, the sender UUID can be null if it is generated by other mods, not by player
	 * @param player
	 * @param from
	 * @param title
	 * @param msg
	 */
	public void send(UUID to, UUID from, String sender, String title, String msg)
	{
		Mail mail = new Mail(to, from, sender, title, msg);
		
		this.pool.put(mail.getId(), mail);
		
		if(this.recv.get(to) == null)
		{
			this.recv.put(to, new HashSet<UUID>());
		}
		this.recv.get(to).add(mail.getId());
		
		if(this.unread.get(to) == null)
		{
			this.unread.put(to, new HashSet<UUID>());
		}
		this.unread.get(to).add(mail.getId());
		
		try {
			this.save();
		} catch (Exception e) {
			logger.fatal("Error occurs at MailPool#save()", e);
		}
	}
	
	public File getStorageDir()
	{
		return this.mailpoolStorage;
	}
	
	public static MailPool init(FMLPostInitializationEvent e)
	{
		if(e.getSide() == Side.SERVER)
		{
			try
			{
				MailPool.instance = new MailPool(new File(ModConfigs.general.mailStorageDir));
				MailPool.instance.load();
			}
			catch(Exception ex)
			{
				logger.fatal("Fail to init MailPool", ex);
			}
		}
		
		return MailPool.instance;
	}
	
	public static MailPool instance()
	{
		return MailPool.instance;
	}
	
	public static class Mail
	{
		private final UUID mid = MathHelper.getRandomUUID();
		private final Header header;
		private final String content;
		
		public Mail(UUID to, UUID from, String senderName, String title, String c)
		{
			if(title.isEmpty()) title = "mail.MailBox.defaultTitle";
			this.header = new Header(to, from, senderName, title);
			this.content = c;
		}
		
		public UUID getId()
		{
			return this.mid;
		}
		
		public Calendar getTimestamp()
		{
			return this.header.timestamp;
		}
		
		public UUID getReceiver()
		{
			return this.header.to;
		}
		
		public String getSenderName()
		{
			return this.header.sender;
		}
		
		public UUID getSender()
		{
			return this.header.from;
		}
		
		public String getTitle()
		{
			return this.header.title;
		}
		
		public String getContent()
		{
			return this.content;
		}
		
		private static final class Header
		{
			private final Calendar timestamp = Calendar.getInstance();
			private final UUID to;
			private final String sender;
			private final UUID from;
			private final String title;
			
			public Header(UUID t, UUID fr, String s, String ttl)
			{
				this.to = t;
				this.sender = s;
				this.from = fr;
				this.title = ttl;
			}
			
			@Override
			public String toString() 
			{
				Gson gson = new Gson();
				return gson.toJson(this);
			}
		}
	}
}
