package me.momocow.moemail.server;

import java.io.File;
import java.lang.reflect.Type;
import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.io.FileUtils;
import org.apache.logging.log4j.Logger;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import me.momocow.moemail.MoEMail;
import me.momocow.moemail.config.Config;
import net.minecraft.util.math.MathHelper;
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
import net.minecraftforge.fml.relauncher.Side;

public class MailPool 
{
	private static MailPool instance;
	private static Logger logger = MoEMail.logger;
	
	private final File mailpoolStorage;
	private final File poolLog;
	private final File recvLog;
	private final File unreadLog;
	private String encoding = "UTF-8";
	
	/**
	 * Map[mailID]=Mail
	 */
	private Map<UUID, Mail> pool = new HashMap<UUID, Mail>();
	/**
	 * Map[recvrID]=Set[unreadMailID]
	 */
	private Map<UUID, Set<UUID>> unread = new HashMap<UUID, Set<UUID>>();
	/**
	 * Map[recvrID]=Set[mailID]
	 */
	private Map<UUID, Set<UUID>> recv = new HashMap<UUID, Set<UUID>>();
	
	private MailPool(File logDir) throws Exception
	{
		this.mailpoolStorage = new File(logDir, "mailpool");
		this.poolLog = new File(this.mailpoolStorage, "pool.log");
		this.recvLog = new File(this.mailpoolStorage, "recv.log");
		this.unreadLog = new File(this.mailpoolStorage, "unread.log");
		
		if(!this.mailpoolStorage.exists())
		{
			this.mailpoolStorage.mkdirs();
		}
		
		if(!this.poolLog.exists())
		{
			try
			{
				this.poolLog.createNewFile();
			}
			catch(Exception e)
			{
				logger.info("Unable to create the log file for the mail pool.");
				throw e;
			}
		}
		
		if(!this.recvLog.exists())
		{
			try
			{
				this.recvLog.createNewFile();
			}
			catch(Exception e)
			{
				logger.info("Unable to create the log file for received mails.");
				throw e;
			}
		}
		
		if(!this.unreadLog.exists())
		{
			try
			{
				this.unreadLog.createNewFile();
			}
			catch(Exception e)
			{
				logger.info("Unable to create the log file for unread mails.");
				throw e;
			}
		}
	}
	
	public void load() throws Exception
	{
		String poolJson = "";
		String recvJson = "";
		String unreadJson = "";
		
		try
		{
			poolJson = FileUtils.readFileToString(this.poolLog, this.encoding);
		}
		catch(Exception e)
		{
			logger.info("Unable to load the mail pool.");
			throw e;
		}
		
		try
		{
			recvJson = FileUtils.readFileToString(this.recvLog, this.encoding);
		}
		catch(Exception e)
		{
			logger.info("Unable to load received mails.");
			throw e;
		}
		
		try
		{
			unreadJson = FileUtils.readFileToString(this.unreadLog, this.encoding);
		}
		catch(Exception e)
		{
			logger.info("Unable to load unread mails.");
			throw e;
		}
		
		if(!poolJson.isEmpty() && !recvJson.isEmpty() && !unreadJson.isEmpty())
		{
			Gson gson = new Gson();
			Type mailMap = new TypeToken<Map<UUID, Mail>>(){}.getType();
			Type midMap = new TypeToken<Map<UUID, Set<UUID>>>(){}.getType();
			
			this.pool = gson.fromJson(poolJson, mailMap);
			this.recv = gson.fromJson(recvJson, midMap);
			this.unread = gson.fromJson(unreadJson, midMap);
		}
	}
	
	public void save() throws Exception
	{		
		Gson gson = new Gson();
		
		try
		{
			FileUtils.writeStringToFile(this.poolLog, gson.toJson(this.pool), this.encoding);
		}
		catch(Exception e)
		{
			logger.info("Unable to log the mail pool.", e);
			throw e;
		}
		
		try
		{
			FileUtils.writeStringToFile(this.recvLog, gson.toJson(this.recv), this.encoding);
		}
		catch(Exception e)
		{
			logger.info("Unable to log received mails.", e);
			throw e;
		}
		
		try
		{
			FileUtils.writeStringToFile(this.unreadLog, gson.toJson(this.unread), this.encoding);
		}
		catch(Exception e)
		{
			logger.info("Unable to log unread mails.");
			throw e;
		}
	}
	
	/**
	 * Store the mail to the mail pool, the sender UUID can be null if it is generated by other mods, not by player
	 * @param player
	 * @param from
	 * @param title
	 * @param msg
	 */
	public void send(UUID to, UUID from, String sender, String title, String msg)
	{
		Mail mail = new Mail(to, from, sender, title, msg);
		
		this.pool.put(mail.getId(), mail);
		
		if(this.recv.get(to) == null)
		{
			this.recv.put(to, new HashSet<UUID>());
		}
		this.recv.get(to).add(mail.getId());
		
		if(this.unread.get(to) == null)
		{
			this.unread.put(to, new HashSet<UUID>());
		}
		this.unread.get(to).add(mail.getId());
		
		try {
			this.save();
		} catch (Exception e) {
			logger.fatal("Error occurs at MailPool#save()", e);
		}
	}
	
	public File getStorageDir()
	{
		return this.mailpoolStorage;
	}
	
	public static MailPool init(FMLPostInitializationEvent e)
	{
		if(e.getSide() == Side.SERVER)
		{
			try
			{
				MailPool.instance = new MailPool(new File(Config.Logs.mailStorageDir));
				MailPool.instance.load();
			}
			catch(Exception ex)
			{
				logger.fatal("Fail to init MailPool", ex);
			}
		}
		
		return MailPool.instance;
	}
	
	public static MailPool instance()
	{
		return MailPool.instance;
	}
	
	public static class Mail
	{
		private final UUID mid = MathHelper.getRandomUUID();
		private final Header header;
		private final String content;
		
		public Mail(UUID to, UUID from, String senderName, String title, String c)
		{
			if(title.isEmpty()) title = "mail.MailBox.defaultTitle";
			this.header = new Header(to, from, senderName, title);
			this.content = c;
		}
		
		public UUID getId()
		{
			return this.mid;
		}
		
		public Calendar getTimestamp()
		{
			return this.header.timestamp;
		}
		
		public UUID getReceiver()
		{
			return this.header.to;
		}
		
		public String getSenderName()
		{
			return this.header.sender;
		}
		
		public UUID getSender()
		{
			return this.header.from;
		}
		
		public String getTitle()
		{
			return this.header.title;
		}
		
		public String getContent()
		{
			return this.content;
		}
		
		private static final class Header
		{
			private final Calendar timestamp = Calendar.getInstance();
			private final UUID to;
			private final String sender;
			private final UUID from;
			private final String title;
			
			public Header(UUID t, UUID fr, String s, String ttl)
			{
				this.to = t;
				this.sender = s;
				this.from = fr;
				this.title = ttl;
			}
			
			@Override
			public String toString() 
			{
				Gson gson = new Gson();
				return gson.toJson(this);
			}
		}
	}
}
